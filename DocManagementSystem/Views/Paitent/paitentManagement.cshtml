@using DocManagementSystem.Common.Helpers
@using DoctorManagementSystem.Common.Entities.Models.Entities
@using Model = DoctorManagementSystem.Common.Entities.Models.Entities
@model DocManagementSystem.Common.Models.Api.Response.SearchListing<Model.PatientVM>
@{
    ViewData["Title"] = "All Patients";
}

@using (new FunctionTracer())
{
    if (Model != null)
    {
        <section id="patients" class="content-section">
            <h2>Patient Management System</h2>
            <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addPatientModal">Register New Patient</button>
            <div class="row mb-3">
                <div class="col">
                    <input type="text" class="form-control" id="patientSearch" placeholder="Search Patients...">
                </div>
                <div class="col-auto">
                    <select id="patientStatus" class="form-select">
                        <option>All</option>
                        <option>Active</option>
                        <option>Inactive</option>
                    </select>
                </div>
                <div class="col-auto">
                    <button class="btn btn-secondary" onclick="filterPatients()">Apply Filters</button>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Age</th>
                            <th>Gender</th>
                            <th>Phone Number</th>
                            <th>Address</th>
                            <th>Assigned Doctor</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="patientsTable">
                        @{
                            if (Model?.TotalResults > 0)
                            {
                                foreach (PatientVM item in Model.Results)
                                {
                                    <tr>
                                        <td>@item.FullName</td>
                                        <td>@item.Age</td>
                                        <td>@item.Gender</td>
                                        <td>@item.PhoneNumber</td>
                                        <td>@item.Address</td>
                                        <td>@item.Doctor?.FullName</td>
                                        <td>
                                            <button class="btn btn-sm btn-primary" id="editPatientButton" data-id="@item.Id" data-bs-target="#editPatientModal" data-bs-toggle="modal">Edit</button>
                                            <button class="btn btn-sm btn-danger" id="deletePatientButton" data-id="@item.Id">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center text-muted">No Paitents found.</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </section>

        <!-- Add Patient Modal -->
        <div class="modal fade" id="addPatientModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <form id="addPatientForm">
                        @Html.AntiForgeryToken()
                        <div class="modal-header">
                            <h5 class="modal-title">Add New Patient</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Full Name</label>
                                <input type="text" class="form-control" name="fullName" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Age</label>
                                <input type="number" class="form-control" name="age" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Gender</label>
                                <select class="form-select" name="gender" required>
                                    <option>Male</option>
                                    <option>Female</option>
                                    <option>Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Phone Number</label>
                                <input type="text" class="form-control" name="phoneNumber" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Address</label>
                                <input type="text" class="form-control" name="address" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Assigned Doctor</label>
                                @{
                                    var doctors = ViewBag.Doctors as List<DoctorVM>;
                                    @if (doctors != null && doctors.Any())
                                    {
                                        <select class="form-select" id="doctorName" name="doctorName" required>
                                            <option value="">-- Select Doctor --</option>
                                            @foreach (var doc in doctors)
                                            {
                                                <option value="@doc.Id">@doc.FullName</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning">No doctors available.</div>
                                    }
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" id="submit">Add Patient</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Edit Patient Modal -->
        <div class="modal fade" id="editPatientModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <form id="editPatientForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" id="editPatientId" />

                        <div class="modal-header">
                            <h5 class="modal-title">Edit Patient</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>

                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Full Name</label>
                                <input type="text" class="form-control" name="fullName" id="editFullName">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Age</label>
                                <input type="number" class="form-control" name="age" id="editAge">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Gender</label>
                                <select class="form-select" name="gender" id="editGender">
                                    <option value="">Select</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Phone Number</label>
                                <input type="text" class="form-control" name="phoneNumber" id="editPhoneNumber">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Address</label>
                                <input type="text" class="form-control" name="address" id="editAddress">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Assigned Doctor</label>
                                @{
                                    var doctors = ViewBag.Doctors as List<DoctorVM>;
                                    @if (doctors != null && doctors.Any())
                                    {
                                        <select class="form-select" name="doctorId" id="editDoctorId">
                                            <option value="">-- Select Doctor --</option>
                                            @foreach (var doc in doctors)
                                            {
                                                <option value="@doc.Id">@doc.FullName</option>
                                            }
                                        </select>
                                    }
                                }
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" id="updatePatientBtn">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script type="text/javascript">
            $(document).ready(function () {

                // Handle Edit Button Click - Populate Modal
                $(document).on('click', '#editPatientButton', function () {
                    const patientId = $(this).data('id');
                    if (!patientId) {
                        alert('Patient ID not found!');
                        return;
                    }

                    // Set the hidden input with the patient ID
                    $('#editPatientId').val(patientId);

                    // Here you would typically fetch the patient data via AJAX
                    // For now, we'll just set the ID and let user update fields
                    // You can add a GET endpoint to fetch patient details if needed
                });

                // Submit Add Patient form
                $('#addPatientForm').on('submit', function (e) {
                    e.preventDefault();

                    const fullName = $('input[name="fullName"]').val().trim();
                    const age = parseInt($('input[name="age"]').val());
                    const gender = $('select[name="gender"]').val();
                    const phoneNumber = $('input[name="phoneNumber"]').val().trim();
                    const address = $('input[name="address"]').val().trim();
                    const doctorId = parseInt($('select[name="doctorName"]').val());

                    if (!fullName || !age || !gender || !phoneNumber || !address || !doctorId) {
                        alert('Please fill all required fields.');
                        return;
                    }

                    const patientData = {
                        FullName: fullName,
                        Age: age,
                        Gender: gender,
                        PhoneNumber: phoneNumber,
                        Address: address,
                        DoctorId: doctorId
                    };

                    const token = $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: '@Url.Action("AddPatient", "Paitent")',
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        contentType: 'application/json',
                        data: JSON.stringify(patientData),
                        success: function (response) {
                            $('#addPatientModal').modal('hide');
                            $('#addPatientForm')[0].reset();
                            location.reload();
                        },
                        error: function (xhr, status, error) {
                            alert('Failed to add patient. Please try again.');
                            console.error(error);
                        }
                    });
                });

                // Submit Edit Patient form
                $('#editPatientForm').on('submit', function (e) {
                    e.preventDefault();

                    const id = $('#editPatientId').val();
                    if (!id) {
                        alert('Patient ID is missing.');
                        return;
                    }

                    const fullName = $('#editFullName').val().trim();
                    const age = parseInt($('#editAge').val());
                    const gender = $('#editGender').val();
                    const phoneNumber = $('#editPhoneNumber').val().trim();
                    const address = $('#editAddress').val().trim();
                    const doctorId = parseInt($('#editDoctorId').val());

                    const patientData = {
                        FullName: fullName,
                        Age: age,
                        Gender: gender,
                        PhoneNumber: phoneNumber,
                        Address: address,
                        DoctorId: doctorId
                    };

                    const token = $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: `/Paitent/EditPatient/${id}`,
                        type: 'PATCH',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        contentType: 'application/json',
                        data: JSON.stringify(patientData),
                        success: function (response) {
                            $('#editPatientModal').modal('hide');
                            $('#editPatientForm')[0].reset();
                            location.reload();
                        },
                        error: function (xhr, status, error) {
                            alert('Failed to update patient. Please try again.');
                            console.error(error);
                        }
                    });
                });

                // Delete patient button click handler
                $(document).on('click', '#deletePatientButton', function () {
                    const patientId = $(this).data('id');
                    if (!patientId) {
                        alert('Patient ID is missing.');
                        return;
                    }

                    if (confirm('Are you sure you want to delete this patient?')) {
                        const token = $('input[name="__RequestVerificationToken"]').val();

                        $.ajax({
                            url: `/Paitent/DeletePatient/${patientId}`,
                            type: 'DELETE',
                            headers: {
                                'RequestVerificationToken': token
                            },
                            success: function (response) {
                                alert('Patient deleted successfully.');
                                location.reload();
                            },
                            error: function () {
                                alert('Failed to delete patient. Please try again.');
                            }
                        });
                    }
                });

            });
        </script>
    }
}